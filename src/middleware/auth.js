const jwt = require('jsonwebtoken');
const pool = require('../config/database');

const verifyToken = async (req, res, next) => {
    console.log('üîê Verificando autenticaci√≥n para ruta:', req.path);
    
    let token = req.headers['authorization'];
    console.log('üì® Headers de autorizaci√≥n:', token);

    if (token && token.startsWith('Bearer ')) {
        token = token.slice(7, token.length);
    } else if (req.query.token) {
        token = req.query.token;
    }

    console.log('üîë Token extra√≠do:', token ? 'PRESENTE' : 'FALTANTE');

    if (!token) {
        console.log('‚ùå Token no proporcionado');
        return res.status(403).json({ error: 'Token no proporcionado' });
    }

    try {
        console.log('üîç Verificando token...');
        
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log('‚úÖ Token JWT decodificado:', decoded);
        
        const userResult = await pool.query(
            'SELECT id, dni, rol, nombre, apellido_paterno, activo FROM usuarios WHERE id = $1',
            [decoded.id]
        );

        if (userResult.rows.length === 0) {
            console.log('‚ùå Usuario no encontrado en BD');
            return res.status(401).json({ error: 'Usuario no v√°lido' });
        }

        if (!userResult.rows[0].activo) {
            console.log('‚ùå Usuario inactivo');
            return res.status(401).json({ error: 'Usuario inactivo' });
        }

        const user = userResult.rows[0];
        console.log('‚úÖ Usuario v√°lido:', user);
        
        req.user = {
            id: user.id,
            dni: user.dni,
            rol: user.rol,
            nombre: user.nombre,
            apellido_paterno: user.apellido_paterno
        };
        
        next();
        
    } catch (error) {
        console.error('‚ùå Error verificando token JWT:', error.message);
        return res.status(401).json({ 
            error: 'Token JWT inv√°lido o expirado. Por favor, inicie sesi√≥n nuevamente.' 
        });
    }
};

// üîê MIDDLEWARE DE AUTORIZACI√ìN POR ROLES
const authorize = (allowedRoles = []) => {
    return (req, res, next) => {
        console.log('üë§ Usuario actual:', req.user.rol);
        console.log('üéØ Roles permitidos:', allowedRoles);
        
        if (!req.user) {
            console.log('‚ùå No hay usuario en la request');
            return res.status(401).json({ error: 'Usuario no autenticado' });
        }

        // Si el array de roles permitidos est√° vac√≠o, permitir todos los roles
        if (allowedRoles.length > 0 && !allowedRoles.includes(req.user.rol)) {
            console.log('‚ùå Acceso denegado. Rol no autorizado:', req.user.rol);
            return res.status(403).json({ 
                error: `No tienes permisos para esta acci√≥n. Rol requerido: ${allowedRoles.join(', ')}` 
            });
        }

        console.log('‚úÖ Acceso autorizado para rol:', req.user.rol);
        next();
    };
};

module.exports = {
    verifyToken,
    authorize
};